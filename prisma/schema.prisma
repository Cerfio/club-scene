// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sessions       Session[]
  resetsPassword ResetPassword[]
  profile        Profile?
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetPassword {
  id        String   @id @default(cuid())
  token     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          String   @id @default(cuid())
  username    String
  description String
  avatar      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  medias      Media[]
  views       View[]
  followers   Follow[] @relation("follower")
  following   Follow[] @relation("following")
}

model Media {
  id          String   @id @default(cuid())
  title       String
  description String
  url         String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  views       View[]
}

model View {
  id        String   @id @default(cuid())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          String   @id @default(cuid())
  follower    Profile  @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   Profile  @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
}
